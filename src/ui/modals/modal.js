import { Component, Button } from '../ui.js'; // Assuming Button is also in ui.js

export class BaseModal {
    constructor(title, app) {
        if (!app || !app.ui) {
            throw new Error("BaseModal requires an app instance with a UI controller.");
        }
        this.title = title;
        this.app = app;
        this.ui = app.ui; // Shortcut to UIController
        this.modalElement = null;
    }

    _createElement() {
        this.modalElement = new Component('div', { className: 'modal-backdrop' });
        const dialog = new Component('div', { className: 'modal-dialog' });
        const header = new Component('div', { className: 'modal-header' });
        const titleComp = new Component('h2', { textContent: this.title });
        const closeButton = new Button({
            textContent: 'Ã—',
            className: 'modal-close',
            onClick: () => this.hide()
        });
        header.add(titleComp, closeButton);

        const content = new Component('div', { className: 'modal-content' });
        const specificContent = this.getContent(); // To be implemented by subclasses
        if (specificContent) {
            content.add(specificContent);
        }

        const footer = new Component('div', { className: 'modal-footer' });
        const footerButtons = this.getFooterButtons(); // To be implemented by subclasses
        if (footerButtons && footerButtons.length > 0) {
            footerButtons.forEach(button => footer.add(button));
        }

        dialog.add(header, content, footer);
        this.modalElement.add(dialog);

        return this.modalElement.element;
    }

    getContent() {
        throw new Error("Method 'getContent()' must be implemented by subclasses.");
    }

    getFooterButtons() {
        throw new Error("Method 'getFooterButtons()' must be implemented by subclasses.");
    }

    show() {
        if (!this.modalElement) {
            this._createElement();
        }
        // Instead of directly appending, we use the UIController's mechanism
        // The UIController's showModal was designed to take an object with title, body, buttons.
        // We need to adapt this. The new BaseModal essentially *is* the modal.
        // So, ui.showModal should now perhaps just take the modal DOM element.
        // For now, let's assume ui.showModal will be adapted or this show() directly manipulates DOM.

        // The existing ui.showModal in UIController expects an object:
        // ui.showModal({ title: 'Title', body: Component, buttons: [Button] })
        // This is a bit conflicting with the new structure.
        // Let's make BaseModal.show() call ui.showModal with the *components* it generates.

        const bodyComponent = this.getContent();
        const footerButtonComponents = this.getFooterButtons();

        this.ui.showModal({
            title: this.title,
            body: bodyComponent, // This should be a Component instance
            buttons: footerButtonComponents, // This should be an array of Button instances
            // We need a way to tie the BaseModal's own close button and backdrop click to its hide method.
            // The current ui.showModal in ui-controller.js creates its own header and close button.
            // This means we'll have duplicate headers if not handled carefully.

            // Option 1: ui.showModal is simplified to just display a pre-built modal element.
            // Option 2: BaseModal doesn't create the full frame, just content and buttons,
            // and ui.showModal continues to create the frame. This seems more aligned with current ui.showModal.

        // Let's go with Option 2 for now to minimize changes to UIController initially.
        // So, BaseModal's _createElement will NOT be used by show().
        // Instead, show() will call ui.showModal, passing content and buttons generated by subclass.
        // The BaseModal's own hide method will be called by buttons from getFooterButtons.

        // Revised approach for show():
        // ui.showModal will still build the frame.
        // BaseModal subclasses will provide content and buttons.
        this.ui.showModal({
            title: this.title,
            body: this.getContent(),
            buttons: this.getFooterButtons()
        });
    }

    hide() {
        // This will be called by buttons within the modal (e.g., a "Cancel" or "Close" button)
        // or the 'x' button if we make ui.showModal use this one.
        this.ui.hideModal();
    }
}
